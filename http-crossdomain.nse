local http = require "http"
local nmap = require "nmap"
local shortport = require "shortport"
local strbuf = require "strbuf"
local table = require "table"
local stdnse = require "stdnse"
description = [[
1) Checks for overly permissive <code>/crossdomain.xml</code> files on a web server.
The script will alert if a wildcard entry is found.

If a <code>/crossdomain.xml</code> file is found that trusts certain domains, 
the script will generate a comma delimited list of the trusted domains so you 
can quickly check to see if any of them are available. 
]]

---
--@output
-- 80/tcp  open   http    syn-ack
-- |  crossdomain.xml
--80/tcp open  http
--| http-crossdomain: 
--|   Crossdomain.xml contains a full wildcard entry - Determine if FQDN serves sensitive information
--|   Crossdomain.xml whitelists domains that could potentially be available for purchase.
--|   Paste the following domains in the URL below to confirm availability
--|   
--|   DOMAIN LOOKUP URL: https://www.dynadot.com/domain/bulk-search.html
--|   
--|_  TRUSTED DOMAINS: domain1.com, domain2.com, domain3.com, domain4.com, domain5.com, domain6.com, domain7.com, domain8.com, domain9.com, domain10.com, domain11.com, domain12.com
--
--@usage
--nmap --script=http-crossdomain <target>

author = "Seth Art, @sethsec, <sethsec@gmail.com>"
license = "Same as Nmap--See http://nmap.org/book/man-legal.html"
categories = {"default", "discovery", "safe"}

portrule = shortport.http

local function isempty(s)
  return s == nil or s == ''
end

local function parse_crossdomain(body, output)
a = {}
local b = ""
  for line in body:gmatch("<allow%-access%-from(.-)%/>") do
    line = line:gsub("^%s*(.-)%s*$", "%1")
    if line:match("domain%=\"%*\"") then
      table.insert(a,"Crossdomain.xml contains a full wildcard entry - Determine if FQDN serves sensitive information")
    else
      line = line:match("domain%=\"(.-)\""):gsub("%*%.", "")
      b = b .. line .. ","
    end
  end
  b = b:gsub(",$", "")
  if not isempty(b) then
    table.insert(a,"Crossdomain.xml whitelists domains that could potentially be available for purchase.")
    table.insert(a,"Paste the following domains in the URL below to confirm availability")
    table.insert(a,"")
    table.insert(a,"DOMAIN LOOKUP URL: https://www.dynadot.com/domain/bulk-search.html")
    table.insert(a,"")
    table.insert(a,"TRUSTED DOMAINS: " .. b)
  end
  return a
end

action = function(host, port)
  local crossdomain, noun
  local answer = http.get(host, port, "/crossdomain.xml" )

  if answer.status ~= 200 then
    return nil
  end

  local output = strbuf.new()
  local detail = 15

  crossdomain = parse_crossdomain(answer.body, output)

  if crossdomain == 0 then
    return
  end

return crossdomain
end
